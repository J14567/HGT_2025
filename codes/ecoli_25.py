"""
Code for the analysis of bwa aligned .sam files. 

python3 Analysis/BWA/ecoli.py 536 K12 536
"""


#Import packages 

import sys
import re 
import glob
import os



#extracting data from the files. 

def parse_sam(file_sam, recipient, donor, out):
    
    """
    Parse the .sam files obtained from BWA or is called by bwa.py. 
    
    Returns two .txt files (one for the donor, one for the recipient) with the positions matching positions 
       
       Arguments: 
       
        file_sam    - .sam files to analyse
        recipient   - name of the recipient as used for BWA
        donor       - name of the donor as used for BWA
        out         -  output file 
        
       
       Side Notes: 
    open(f'sam/test/{file_sam}') correponds to your entry files. The files path can be changed. 
    
    open(f'position/testJuliette/{recipient}_{out}_pos.txt)
    open(f'position/testJuliette/{donor}_{out}_pos.txt', "w") :output files. Files path can be changed.
    
    """
   # with open(f'sam/Evolution/{file_sam}') as filin, open(f'position/testJuliette/{recipient}_{out}_pos.txt', "w")  as rec_file, \
        
    with open(f'sam/{file_sam}') as filin, open(f'position/{recipient}_{out}_pos.txt', "w")  as rec_file, \
    open(f'position/{donor}_{out}_pos.txt', "w") as don_file:

    #open(f'position/testJuliette/{donor}_{out}_pos.txt', "w") as don_file:
        d = {recipient: rec_file, donor: don_file}
        #we remove the lines starting with @ 
        for line in filin:
            if line.startswith("@"):
                continue
            list_line = line[:-1].split() #split our string into a list 
            #we compute the score and the alternative score. 
            score = int(re.compile(r'AS:i:(\d+)').findall(line)[0]) 
            #corresponds to AS (Alignment score generated by aligner)
            score_alternatif = int(re.compile(r'XS:i:(\d+)').findall(line)[0]) 
            #corresponds to XS (secondary alignment score)
            
            if list_line[2] == "Plasmid" or list_line[2] == "*" or score == 0 or \
            score == score_alternatif: 
                 continue
            if re.compile(r'XA:Z:.+,.\d+,.*,\d+;.+,.\d+,.*,\d+;').findall(line): #if there is multiple hits
                continue

            second_pos = -1
            second = re.compile(r'XA:Z:(.+),.(\d+),.*,\d+;').findall(line)

            if second:
                if second[0][0] == list_line[2]:
                    continue

                #if there is a lesser mapping but relavant enough to be noted we have
                if score - score_alternatif < 30: 
                    second_pos = second[0][1]
            d[list_line[2]].write(f"{list_line[3]}\t{second_pos}\n")



            
            
def main():
    parse_sam(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[1])
    #parse_sam(sys.argv[1] + ".sam", sys.argv[2], sys.argv[3], sys.argv[1])

if __name__=="__main__":
    main()

